
LEDsegment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000328  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010e  0080010e  000003ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e01  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086b  00000000  00000000  000012e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d5  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004db  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000497  00000000  00000000  0000279f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002c36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_no_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;								// Change pointer to Data Register
    *reg_name = *reg_name & ~(1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 0f 01 	call	0x21e	; 0x21e <SEG_init>
    //SEG_update_shift_regs(5, 1);
    

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
	 TIM1_overflow_262ms();
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	83 60       	ori	r24, 0x03	; 3
 102:	80 83       	st	Z, r24
	 TIM0_overflow_4ms();
 104:	85 b5       	in	r24, 0x25	; 37
 106:	89 7f       	andi	r24, 0xF9	; 249
 108:	85 bd       	out	0x25, r24	; 37
 10a:	85 b5       	in	r24, 0x25	; 37
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	85 bd       	out	0x25, r24	; 37
	 TIM1_overflow_interrupt_enable();
 110:	ef e6       	ldi	r30, 0x6F	; 111
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
	sei();
 11a:	78 94       	sei
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0x2c>

0000011e <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	static num0 = 0;
	static num1 = 0;
	SEG_update_shift_regs(num0, 0);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <num0.1617>
 146:	0e 94 1f 01 	call	0x23e	; 0x23e <SEG_update_shift_regs>
	num0++;
 14a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <num0.1617>
 14e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <num0.1617+0x1>
 152:	01 96       	adiw	r24, 0x01	; 1
	if (num0 > 9)
 154:	8a 30       	cpi	r24, 0x0A	; 10
 156:	91 05       	cpc	r25, r1
 158:	2c f4       	brge	.+10     	; 0x164 <__vector_13+0x46>
ISR(TIMER1_OVF_vect)
{
	static num0 = 0;
	static num1 = 0;
	SEG_update_shift_regs(num0, 0);
	num0++;
 15a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <num0.1617+0x1>
 15e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <num0.1617>
 162:	04 c0       	rjmp	.+8      	; 0x16c <__vector_13+0x4e>
	if (num0 > 9)
	{
		num0 = 0;
 164:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <num0.1617+0x1>
 168:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <num0.1617>
		num1++;
	}
	
	if (num1 > 6);
	{
		num1 = 0;
 16c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <num1.1618+0x1>
 170:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <num1.1618>
	}
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_16>:

ISR(TIMER0_OVF_vect)
{	
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	// WRITE YOUR CODE HERE
	static pos = 0;
	if (pos == 0)
 1b8:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 1bc:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <__data_end+0x1>
 1c0:	61 15       	cp	r22, r1
 1c2:	71 05       	cpc	r23, r1
 1c4:	31 f4       	brne	.+12     	; 0x1d2 <__vector_16+0x3c>
	{
		SEG_update_shift_regs(num2, pos);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <num2>
 1cc:	0e 94 1f 01 	call	0x23e	; 0x23e <SEG_update_shift_regs>
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <__vector_16+0x44>
	}
	else
	{
		SEG_update_shift_regs(num3, pos);
 1d2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <num3>
 1d6:	0e 94 1f 01 	call	0x23e	; 0x23e <SEG_update_shift_regs>
	}
	pos ++;
 1da:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1de:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 1e2:	01 96       	adiw	r24, 0x01	; 1
	if (pos > 1)
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	91 05       	cpc	r25, r1
 1e8:	2c f4       	brge	.+10     	; 0x1f4 <__vector_16+0x5e>
	}
	else
	{
		SEG_update_shift_regs(num3, pos);
	}
	pos ++;
 1ea:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 1ee:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <__vector_16+0x66>
	if (pos > 1)
	{
		pos = 0;
 1f4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x1>
 1f8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 21e:	64 e0       	ldi	r22, 0x04	; 4
 220:	8a e2       	ldi	r24, 0x2A	; 42
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 228:	67 e0       	ldi	r22, 0x07	; 7
 22a:	8a e2       	ldi	r24, 0x2A	; 42
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	84 e2       	ldi	r24, 0x24	; 36
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 23c:	08 95       	ret

0000023e <SEG_update_shift_regs>:
    0b01000000,     // Position 2
    0b10000000		// Position 3
};

void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
    uint8_t bit_number;
    
    segments = segment_value[segments];     // 0, 1, ..., 9
 244:	e8 2f       	mov	r30, r24
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 5f       	subi	r30, 0xFC	; 252
 24a:	fe 4f       	sbci	r31, 0xFE	; 254
 24c:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 24e:	e6 2f       	mov	r30, r22
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	e0 50       	subi	r30, 0x00	; 0
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	d0 81       	ld	r29, Z
    
    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 258:	64 e0       	ldi	r22, 0x04	; 4
 25a:	8b e2       	ldi	r24, 0x2B	; 43
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 262:	67 e0       	ldi	r22, 0x07	; 7
 264:	8b e2       	ldi	r24, 0x2B	; 43
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	85 e2       	ldi	r24, 0x25	; 37
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	8a 95       	dec	r24
 27a:	f1 f7       	brne	.-4      	; 0x278 <SEG_update_shift_regs+0x3a>
 27c:	00 00       	nop
 27e:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if (segments & 1 == 1)
 280:	10 ff       	sbrs	r17, 0
 282:	06 c0       	rjmp	.+12     	; 0x290 <SEG_update_shift_regs+0x52>
        {
            GPIO_write_high(&PORTB, SEG_DATA);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	85 e2       	ldi	r24, 0x25	; 37
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 28e:	05 c0       	rjmp	.+10     	; 0x29a <SEG_update_shift_regs+0x5c>
        }
		
        else
        {
            GPIO_write_low(&PORTB, SEG_DATA);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	85 e2       	ldi	r24, 0x25	; 37
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	8a 95       	dec	r24
 29e:	f1 f7       	brne	.-4      	; 0x29c <SEG_update_shift_regs+0x5e>
 2a0:	00 00       	nop
        }
        
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 2a2:	67 e0       	ldi	r22, 0x07	; 7
 2a4:	8b e2       	ldi	r24, 0x2B	; 43
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2ac:	85 e0       	ldi	r24, 0x05	; 5
 2ae:	8a 95       	dec	r24
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <SEG_update_shift_regs+0x70>
 2b2:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 2b4:	67 e0       	ldi	r22, 0x07	; 7
 2b6:	8b e2       	ldi	r24, 0x2B	; 43
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 2be:	16 95       	lsr	r17
 2c0:	c1 50       	subi	r28, 0x01	; 1
    _delay_us(1);
    
    // Loop through the 1st byte (segments)
    
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2c2:	f1 f6       	brne	.-68     	; 0x280 <SEG_update_shift_regs+0x42>
 2c4:	c8 e0       	ldi	r28, 0x08	; 8
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        
        if (position & 1 == 1)
 2c6:	d0 ff       	sbrs	r29, 0
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <SEG_update_shift_regs+0x98>
        {
            GPIO_write_high(&PORTB, SEG_DATA);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	85 e2       	ldi	r24, 0x25	; 37
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <SEG_update_shift_regs+0xa2>
        }
        else
        {
            GPIO_write_low(&PORTB, SEG_DATA);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	85 e2       	ldi	r24, 0x25	; 37
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2e0:	85 e0       	ldi	r24, 0x05	; 5
 2e2:	8a 95       	dec	r24
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <SEG_update_shift_regs+0xa4>
 2e6:	00 00       	nop
        }
        
        // Wait 1 us
         _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 2e8:	67 e0       	ldi	r22, 0x07	; 7
 2ea:	8b e2       	ldi	r24, 0x2B	; 43
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2f2:	85 e0       	ldi	r24, 0x05	; 5
 2f4:	8a 95       	dec	r24
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <SEG_update_shift_regs+0xb6>
 2f8:	00 00       	nop
        // Wait 1 us
         _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 2fa:	67 e0       	ldi	r22, 0x07	; 7
 2fc:	8b e2       	ldi	r24, 0x2B	; 43
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 304:	d6 95       	lsr	r29
 306:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 308:	f1 f6       	brne	.-68     	; 0x2c6 <SEG_update_shift_regs+0x88>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 30a:	64 e0       	ldi	r22, 0x04	; 4
 30c:	8b e2       	ldi	r24, 0x2B	; 43
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 314:	85 e0       	ldi	r24, 0x05	; 5
 316:	8a 95       	dec	r24
 318:	f1 f7       	brne	.-4      	; 0x316 <SEG_update_shift_regs+0xd8>
 31a:	00 00       	nop
    // Wait 1 us
     _delay_us(1);
}
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	08 95       	ret

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
