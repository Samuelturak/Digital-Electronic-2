
lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000019a  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800118  00800118  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000857  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a5  00000000  00000000  00000b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c0  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b0  00000000  00000000  0000185d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001a0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int main(void)
{
	
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000
    DDRB = DDRB | (1<<LED_GREEN);
  a6:	25 9a       	sbi	0x04, 5	; 4

    // Set pin LOW in Data Register (LED off)
    // PORTB = PORTB and 1101 1111
    PORTB = PORTB & ~(1<<LED_GREEN);
  a8:	2d 98       	cbi	0x05, 5	; 5
    PORTB = PORTB | (1<<LED_GREEN);
  aa:	2d 9a       	sbi	0x05, 5	; 5
		{
			switch (info[i])
			{
				case DASH_DELAY:
				_delay_ms(DASH_DELAY);
				 PORTB = PORTB ^ (1<<LED_GREEN);
  ac:	20 e2       	ldi	r18, 0x20	; 32

    // Infinite loop
    while (1)
    {
		
		for (i = 0; i < 12; ++i)
  ae:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
  b2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
		{
			switch (info[i])
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	fc 01       	movw	r30, r24
  c0:	e0 50       	subi	r30, 0x00	; 0
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	80 81       	ld	r24, Z
  c6:	91 81       	ldd	r25, Z+1	; 0x01
  c8:	84 3f       	cpi	r24, 0xF4	; 244
  ca:	31 e0       	ldi	r19, 0x01	; 1
  cc:	93 07       	cpc	r25, r19
  ce:	69 f0       	breq	.+26     	; 0xea <main+0x44>
  d0:	24 f4       	brge	.+8      	; 0xda <main+0x34>
  d2:	8a 3f       	cpi	r24, 0xFA	; 250
  d4:	91 05       	cpc	r25, r1
  d6:	f9 f0       	breq	.+62     	; 0x116 <main+0x70>
  d8:	4d c0       	rjmp	.+154    	; 0x174 <main+0xce>
  da:	88 3e       	cpi	r24, 0xE8	; 232
  dc:	33 e0       	ldi	r19, 0x03	; 3
  de:	93 07       	cpc	r25, r19
  e0:	81 f1       	breq	.+96     	; 0x142 <main+0x9c>
  e2:	80 3d       	cpi	r24, 0xD0	; 208
  e4:	97 40       	sbci	r25, 0x07	; 7
  e6:	d1 f1       	breq	.+116    	; 0x15c <main+0xb6>
  e8:	45 c0       	rjmp	.+138    	; 0x174 <main+0xce>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	99 e6       	ldi	r25, 0x69	; 105
  ee:	38 e1       	ldi	r19, 0x18	; 24
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	30 40       	sbci	r19, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x4a>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x54>
  fa:	00 00       	nop
			{
				case DASH_DELAY:
				_delay_ms(DASH_DELAY);
				 PORTB = PORTB ^ (1<<LED_GREEN);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	82 27       	eor	r24, r18
 100:	85 b9       	out	0x05, r24	; 5
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	94 e3       	ldi	r25, 0x34	; 52
 106:	3c e0       	ldi	r19, 0x0C	; 12
 108:	81 50       	subi	r24, 0x01	; 1
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	30 40       	sbci	r19, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x62>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x6c>
 112:	00 00       	nop
 114:	2f c0       	rjmp	.+94     	; 0x174 <main+0xce>
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	94 e3       	ldi	r25, 0x34	; 52
 11a:	3c e0       	ldi	r19, 0x0C	; 12
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	30 40       	sbci	r19, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x76>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x80>
 126:	00 00       	nop
				 _delay_ms(PAUSE_DELAY);
				break;
				
				case DOT_DELAY:
				_delay_ms(DOT_DELAY);
				 PORTB = PORTB ^ (1<<LED_GREEN);
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	82 27       	eor	r24, r18
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	94 e3       	ldi	r25, 0x34	; 52
 132:	3c e0       	ldi	r19, 0x0C	; 12
 134:	81 50       	subi	r24, 0x01	; 1
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	30 40       	sbci	r19, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x8e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x98>
 13e:	00 00       	nop
 140:	19 c0       	rjmp	.+50     	; 0x174 <main+0xce>
				 _delay_ms(PAUSE_DELAY);
				break;
				
				case LETTER_DELAY:
				 PORTB = PORTB ^ (1<<LED_GREEN);
 142:	85 b1       	in	r24, 0x05	; 5
 144:	82 27       	eor	r24, r18
 146:	85 b9       	out	0x05, r24	; 5
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	93 ed       	ldi	r25, 0xD3	; 211
 14c:	30 e3       	ldi	r19, 0x30	; 48
 14e:	81 50       	subi	r24, 0x01	; 1
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	30 40       	sbci	r19, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0xa8>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xb2>
 158:	00 00       	nop
 15a:	0c c0       	rjmp	.+24     	; 0x174 <main+0xce>
				_delay_ms(LETTER_DELAY);
				break;
				
				case WORD_DELAY:
				 PORTB = PORTB ^ (1<<LED_GREEN);
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	82 27       	eor	r24, r18
 160:	85 b9       	out	0x05, r24	; 5
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	97 ea       	ldi	r25, 0xA7	; 167
 166:	31 e6       	ldi	r19, 0x61	; 97
 168:	81 50       	subi	r24, 0x01	; 1
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	30 40       	sbci	r19, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0xc2>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0xcc>
 172:	00 00       	nop
				
				default:
				;
			}
			
			 PORTB = PORTB ^ (1<<LED_GREEN);
 174:	85 b1       	in	r24, 0x05	; 5
 176:	82 27       	eor	r24, r18
 178:	85 b9       	out	0x05, r24	; 5

    // Infinite loop
    while (1)
    {
		
		for (i = 0; i < 12; ++i)
 17a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 17e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 188:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 18c:	8c 30       	cpi	r24, 0x0C	; 12
 18e:	91 05       	cpc	r25, r1
 190:	0c f4       	brge	.+2      	; 0x194 <main+0xee>
 192:	93 cf       	rjmp	.-218    	; 0xba <main+0x14>
 194:	8c cf       	rjmp	.-232    	; 0xae <main+0x8>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
