
knight_rider_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b5  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  000009dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d6  00000000  00000000  0000105b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c2  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000154  00000000  00000000  0000171a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
	// Green LED at port B
	// Set pin as output in Data Direction Register...
	
	DDRB = DDRB | (1<<LED_1);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	82 60       	ori	r24, 0x02	; 2
  84:	84 b9       	out	0x04, r24	; 4
	DDRB = DDRB | (1<<LED_2);
  86:	84 b1       	in	r24, 0x04	; 4
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	84 b9       	out	0x04, r24	; 4
	DDRB = DDRB | (1<<LED_3);
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	88 60       	ori	r24, 0x08	; 8
  90:	84 b9       	out	0x04, r24	; 4
	DDRB = DDRB | (1<<LED_4);
  92:	84 b1       	in	r24, 0x04	; 4
  94:	80 61       	ori	r24, 0x10	; 16
  96:	84 b9       	out	0x04, r24	; 4
	DDRB = DDRB | (1<<LED_5);
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	84 b9       	out	0x04, r24	; 4
	
	DDRD = DDRD & ~(1<<BUTTON);
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	8a b9       	out	0x0a, r24	; 10
	
	// ...and turn LED off in Data Register
	PORTB = PORTB | 62;
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	8e 63       	ori	r24, 0x3E	; 62
  a8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	49 e6       	ldi	r20, 0x69	; 105
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	40 40       	sbci	r20, 0x00	; 0
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x30>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x3a>
  ba:	00 00       	nop
  bc:	9f ef       	ldi	r25, 0xFF	; 255
  be:	29 e6       	ldi	r18, 0x69	; 105
  c0:	48 e1       	ldi	r20, 0x18	; 24
  c2:	91 50       	subi	r25, 0x01	; 1
  c4:	20 40       	sbci	r18, 0x00	; 0
  c6:	40 40       	sbci	r20, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x42>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x4c>
  cc:	00 00       	nop
	//PORTB = PORTB | (1<<LED_3);
	//PORTB = PORTB | (1<<LED_4);
	//PORTB = PORTB | (1<<LED_5);
	_delay_ms(BLINK_DELAY);
	
	PORTD = PORTD |	(1<<BUTTON);
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	8b b9       	out	0x0b, r24	; 11

		// WRITE YOUR CODE HERE
		
		
		
		for (i = 2; i < 6; ++i)
  d4:	22 e0       	ldi	r18, 0x02	; 2
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	14 c0       	rjmp	.+40     	; 0x102 <main+0x82>
		{
			PORTB  = (1 << PORTB);
  da:	45 b1       	in	r20, 0x05	; 5
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <main+0x66>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	4a 95       	dec	r20
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <main+0x62>
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	99 e6       	ldi	r25, 0x69	; 105
  f0:	48 e1       	ldi	r20, 0x18	; 24
  f2:	81 50       	subi	r24, 0x01	; 1
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	40 40       	sbci	r20, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x72>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x7c>
  fc:	00 00       	nop

		// WRITE YOUR CODE HERE
		
		
		
		for (i = 2; i < 6; ++i)
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	26 30       	cpi	r18, 0x06	; 6
 104:	31 05       	cpc	r19, r1
 106:	4c f3       	brlt	.-46     	; 0xda <main+0x5a>
 108:	22 e0       	ldi	r18, 0x02	; 2
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	14 c0       	rjmp	.+40     	; 0x136 <main+0xb6>
			_delay_ms(BLINK_DELAY);
		}
		
		for (i = 2; i < 6; ++i)
		{
			PORTB  = (1 >> PORTB);
 10e:	45 b1       	in	r20, 0x05	; 5
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0x9a>
 116:	95 95       	asr	r25
 118:	87 95       	ror	r24
 11a:	4a 95       	dec	r20
 11c:	e2 f7       	brpl	.-8      	; 0x116 <main+0x96>
 11e:	85 b9       	out	0x05, r24	; 5
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	99 e6       	ldi	r25, 0x69	; 105
 124:	48 e1       	ldi	r20, 0x18	; 24
 126:	81 50       	subi	r24, 0x01	; 1
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	40 40       	sbci	r20, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0xa6>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xb0>
 130:	00 00       	nop
		{
			PORTB  = (1 << PORTB);
			_delay_ms(BLINK_DELAY);
		}
		
		for (i = 2; i < 6; ++i)
 132:	2f 5f       	subi	r18, 0xFF	; 255
 134:	3f 4f       	sbci	r19, 0xFF	; 255
 136:	26 30       	cpi	r18, 0x06	; 6
 138:	31 05       	cpc	r19, r1
 13a:	4c f3       	brlt	.-46     	; 0x10e <main+0x8e>
 13c:	cb cf       	rjmp	.-106    	; 0xd4 <main+0x54>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
