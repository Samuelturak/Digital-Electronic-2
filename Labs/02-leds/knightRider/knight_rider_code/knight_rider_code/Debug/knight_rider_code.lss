
knight_rider_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087b  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  00000b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000349  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cb  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000234  00000000  00000000  000018e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
	// Green LED at port B
	// Set pin as output in Data Direction Register...
	
	DDRB = DDRB | (1<<LED_1);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	82 60       	ori	r24, 0x02	; 2
  84:	84 b9       	out	0x04, r24	; 4
	DDRB = DDRB | (1<<LED_2);
  86:	84 b1       	in	r24, 0x04	; 4
  88:	84 60       	ori	r24, 0x04	; 4
  8a:	84 b9       	out	0x04, r24	; 4
	DDRB = DDRB | (1<<LED_3);
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	88 60       	ori	r24, 0x08	; 8
  90:	84 b9       	out	0x04, r24	; 4
	DDRB = DDRB | (1<<LED_4);
  92:	84 b1       	in	r24, 0x04	; 4
  94:	80 61       	ori	r24, 0x10	; 16
  96:	84 b9       	out	0x04, r24	; 4
	DDRB = DDRB | (1<<LED_5);
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	84 b9       	out	0x04, r24	; 4
	
	DDRD = DDRD & ~(1<<BUTTON);
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	8a b9       	out	0x0a, r24	; 10
	
	// ...and turn LED off in Data Register
	PORTB = PORTB & ~(1<<LED_1);
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	85 b9       	out	0x05, r24	; 5
	//_delay_ms(BLINK_DELAY);
	PORTB = PORTB & ~(1<<LED_2);
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB & ~(1<<LED_3);
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	87 7f       	andi	r24, 0xF7	; 247
  b4:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB & ~(1<<LED_4);
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8f 7e       	andi	r24, 0xEF	; 239
  ba:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB & ~(1<<LED_5);
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	8f 7d       	andi	r24, 0xDF	; 223
  c0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	61 ee       	ldi	r22, 0xE1	; 225
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	60 40       	sbci	r22, 0x00	; 0
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x48>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x52>
  d2:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	
	PORTD = PORTD |	(1<<BUTTON);
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	8b b9       	out	0x0b, r24	; 11
	
	
	int i;
	int go;
	go = 0;
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	50 e0       	ldi	r21, 0x00	; 0
	while (1)
	{
		// Pause several milliseconds

		// WRITE YOUR CODE HERE
		if(!go && bit_is_set(PIND, 5))
  de:	41 15       	cp	r20, r1
  e0:	51 05       	cpc	r21, r1
  e2:	81 f4       	brne	.+32     	; 0x104 <main+0x84>
  e4:	4d 9b       	sbis	0x09, 5	; 9
  e6:	0e c0       	rjmp	.+28     	; 0x104 <main+0x84>
		{
			go = 1;
			PORTB = PORTB | (1<<LED_1);
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	9f ef       	ldi	r25, 0xFF	; 255
  f0:	21 ee       	ldi	r18, 0xE1	; 225
  f2:	64 e0       	ldi	r22, 0x04	; 4
  f4:	91 50       	subi	r25, 0x01	; 1
  f6:	20 40       	sbci	r18, 0x00	; 0
  f8:	60 40       	sbci	r22, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x74>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7e>
  fe:	00 00       	nop
		// Pause several milliseconds

		// WRITE YOUR CODE HERE
		if(!go && bit_is_set(PIND, 5))
		{
			go = 1;
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	50 e0       	ldi	r21, 0x00	; 0
			PORTB = PORTB | (1<<LED_1);
			_delay_ms(BLINK_DELAY);
		}
		
		if (go)
 104:	41 15       	cp	r20, r1
 106:	51 05       	cpc	r21, r1
 108:	81 f4       	brne	.+32     	; 0x12a <main+0xaa>
 10a:	28 c0       	rjmp	.+80     	; 0x15c <main+0xdc>
		{
			for (i = 1; i < 5; ++i)
			{
				PORTB  = (PORTB << 1) ;
 10c:	85 b1       	in	r24, 0x05	; 5
 10e:	88 0f       	add	r24, r24
 110:	85 b9       	out	0x05, r24	; 5
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	91 ee       	ldi	r25, 0xE1	; 225
 116:	64 e0       	ldi	r22, 0x04	; 4
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	60 40       	sbci	r22, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x98>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0xa2>
 122:	00 00       	nop
			_delay_ms(BLINK_DELAY);
		}
		
		if (go)
		{
			for (i = 1; i < 5; ++i)
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	02 c0       	rjmp	.+4      	; 0x12e <main+0xae>
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	25 30       	cpi	r18, 0x05	; 5
 130:	31 05       	cpc	r19, r1
 132:	64 f3       	brlt	.-40     	; 0x10c <main+0x8c>
 134:	21 e0       	ldi	r18, 0x01	; 1
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	0e c0       	rjmp	.+28     	; 0x156 <main+0xd6>
				_delay_ms(BLINK_DELAY);
			}
			
			for (i = 1; i < 5; ++i)
			{
				PORTB  = (PORTB >> 1);
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	86 95       	lsr	r24
 13e:	85 b9       	out	0x05, r24	; 5
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	91 ee       	ldi	r25, 0xE1	; 225
 144:	64 e0       	ldi	r22, 0x04	; 4
 146:	81 50       	subi	r24, 0x01	; 1
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	60 40       	sbci	r22, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0xc6>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0xd0>
 150:	00 00       	nop
			{
				PORTB  = (PORTB << 1) ;
				_delay_ms(BLINK_DELAY);
			}
			
			for (i = 1; i < 5; ++i)
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
 156:	25 30       	cpi	r18, 0x05	; 5
 158:	31 05       	cpc	r19, r1
 15a:	7c f3       	brlt	.-34     	; 0x13a <main+0xba>
				PORTB  = (PORTB >> 1);
				_delay_ms(BLINK_DELAY);
			}
		}
				
		if(go && bit_is_set(PIND, 5))
 15c:	41 15       	cp	r20, r1
 15e:	51 05       	cpc	r21, r1
 160:	09 f4       	brne	.+2      	; 0x164 <main+0xe4>
 162:	bd cf       	rjmp	.-134    	; 0xde <main+0x5e>
 164:	4d 9b       	sbis	0x09, 5	; 9
 166:	bb cf       	rjmp	.-138    	; 0xde <main+0x5e>
		{
			go = 0;
			PORTB = PORTB & ~(1<<LED_1);
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	8d 7f       	andi	r24, 0xFD	; 253
 16c:	85 b9       	out	0x05, r24	; 5
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	91 ee       	ldi	r25, 0xE1	; 225
 172:	24 e0       	ldi	r18, 0x04	; 4
 174:	81 50       	subi	r24, 0x01	; 1
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	20 40       	sbci	r18, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0xf4>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xfe>
 17e:	00 00       	nop
 180:	6f ef       	ldi	r22, 0xFF	; 255
 182:	81 ee       	ldi	r24, 0xE1	; 225
 184:	94 e0       	ldi	r25, 0x04	; 4
 186:	61 50       	subi	r22, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x106>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x110>
 190:	00 00       	nop
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	61 ee       	ldi	r22, 0xE1	; 225
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	60 40       	sbci	r22, 0x00	; 0
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x118>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x122>
 1a2:	00 00       	nop
			}
		}
				
		if(go && bit_is_set(PIND, 5))
		{
			go = 0;
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	9a cf       	rjmp	.-204    	; 0xde <main+0x5e>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
