
i2c_bus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000396  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800120  00800120  0000044a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce2  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  0000125e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000647  00000000  00000000  00001b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000021b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000528  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f4  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002db4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_18>
  4c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 36       	cpi	r26, 0x65	; 101
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c9 01 	jmp	0x392	; 0x392 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 ce 00 	call	0x19c	; 0x19c <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 57 01 	call	0x2ae	; 0x2ae <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 85 01 	call	0x30a	; 0x30a <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <__vector_13+0x28>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	9a 83       	std	Y+2, r25	; 0x02
 10a:	89 83       	std	Y+1, r24	; 0x01

    // FSM
    switch (state)
 10c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1964>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	89 f0       	breq	.+34     	; 0x136 <__vector_13+0x5e>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	d1 f0       	breq	.+52     	; 0x14c <__vector_13+0x74>
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	41 f5       	brne	.+80     	; 0x16c <__vector_13+0x94>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	98 0f       	add	r25, r24
 124:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
        // If slave address is between 8 and 119 then move to SEND state
        if (addr > 8 && addr < 119)
 128:	88 50       	subi	r24, 0x08	; 8
 12a:	8e 36       	cpi	r24, 0x6E	; 110
 12c:	10 f5       	brcc	.+68     	; 0x172 <__vector_13+0x9a>
        {
            state = STATE_SEND;
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 134:	1e c0       	rjmp	.+60     	; 0x172 <__vector_13+0x9a>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 13a:	88 0f       	add	r24, r24
 13c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <twi_start>
        twi_stop();
 140:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_stop>
        {
            state = STATE_ACK;
        } 
        else
        {
            state = STATE_IDLE;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 14a:	13 c0       	rjmp	.+38     	; 0x172 <__vector_13+0x9a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 14c:	40 e1       	ldi	r20, 0x10	; 16
 14e:	be 01       	movw	r22, r28
 150:	6f 5f       	subi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 94 01 	call	0x328	; 0x328 <__itoa_ncheck>

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
        itoa(state, uart_string, 16);
        uart_puts(uart_string);
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	0e 94 85 01 	call	0x30a	; 0x30a <uart_puts>
        state = STATE_IDLE;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
 16a:	03 c0       	rjmp	.+6      	; 0x172 <__vector_13+0x9a>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        //state = STATE_HUMID;
        
    //case STATE_HUMID;
        
    }
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 19c:	87 b1       	in	r24, 0x07	; 7
 19e:	8f 7c       	andi	r24, 0xCF	; 207
 1a0:	87 b9       	out	0x07, r24	; 7
 1a2:	88 b1       	in	r24, 0x08	; 8
 1a4:	80 63       	ori	r24, 0x30	; 48
 1a6:	88 b9       	out	0x08, r24	; 8
 1a8:	e9 eb       	ldi	r30, 0xB9	; 185
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	8c 7f       	andi	r24, 0xFC	; 252
 1b0:	80 83       	st	Z, r24
 1b2:	88 e9       	ldi	r24, 0x98	; 152
 1b4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 1b8:	08 95       	ret

000001ba <twi_start>:
 1ba:	94 ea       	ldi	r25, 0xA4	; 164
 1bc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1c0:	ec eb       	ldi	r30, 0xBC	; 188
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	90 81       	ld	r25, Z
 1c6:	99 23       	and	r25, r25
 1c8:	ec f7       	brge	.-6      	; 0x1c4 <twi_start+0xa>
 1ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1ce:	84 e8       	ldi	r24, 0x84	; 132
 1d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1d4:	ec eb       	ldi	r30, 0xBC	; 188
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	ec f7       	brge	.-6      	; 0x1d8 <twi_start+0x1e>
 1de:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 1e2:	98 7f       	andi	r25, 0xF8	; 248
 1e4:	98 31       	cpi	r25, 0x18	; 24
 1e6:	29 f0       	breq	.+10     	; 0x1f2 <twi_start+0x38>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 34       	cpi	r25, 0x40	; 64
 1ec:	19 f4       	brne	.+6      	; 0x1f4 <twi_start+0x3a>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret

000001f6 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 1f6:	84 e9       	ldi	r24, 0x94	; 148
 1f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1fc:	08 95       	ret

000001fe <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	2f 93       	push	r18
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
 212:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 216:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 21a:	8c 71       	andi	r24, 0x1C	; 28
 21c:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <UART_RxHead>
 220:	ef 5f       	subi	r30, 0xFF	; 255
 222:	ef 71       	andi	r30, 0x1F	; 31
 224:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <UART_RxTail>
 228:	e9 17       	cp	r30, r25
 22a:	39 f0       	breq	.+14     	; 0x23a <__vector_18+0x3c>
 22c:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <UART_RxHead>
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	eb 5d       	subi	r30, 0xDB	; 219
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	20 83       	st	Z, r18
 238:	01 c0       	rjmp	.+2      	; 0x23c <__vector_18+0x3e>
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
 240:	89 2b       	or	r24, r25
 242:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_19>:
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
 26c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <UART_TxHead>
 270:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <UART_TxTail>
 274:	98 17       	cp	r25, r24
 276:	69 f0       	breq	.+26     	; 0x292 <__vector_19+0x38>
 278:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <UART_TxTail>
 27c:	ef 5f       	subi	r30, 0xFF	; 255
 27e:	ef 71       	andi	r30, 0x1F	; 31
 280:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <UART_TxTail>
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	eb 5b       	subi	r30, 0xBB	; 187
 288:	fe 4f       	sbci	r31, 0xFE	; 254
 28a:	80 81       	ld	r24, Z
 28c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 290:	05 c0       	rjmp	.+10     	; 0x29c <__vector_19+0x42>
 292:	e1 ec       	ldi	r30, 0xC1	; 193
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	8f 7d       	andi	r24, 0xDF	; 223
 29a:	80 83       	st	Z, r24
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <uart_init>:
 2ae:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UART_TxHead>
 2b2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <UART_TxTail>
 2b6:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UART_RxHead>
 2ba:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <UART_RxTail>
 2be:	99 23       	and	r25, r25
 2c0:	1c f4       	brge	.+6      	; 0x2c8 <uart_init+0x1a>
 2c2:	22 e0       	ldi	r18, 0x02	; 2
 2c4:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 2c8:	90 78       	andi	r25, 0x80	; 128
 2ca:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 2ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 2d2:	88 e9       	ldi	r24, 0x98	; 152
 2d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 2d8:	86 e0       	ldi	r24, 0x06	; 6
 2da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 2de:	08 95       	ret

000002e0 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2e0:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <UART_TxHead>
 2e4:	2f 5f       	subi	r18, 0xFF	; 255
 2e6:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 2e8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <UART_TxTail>
 2ec:	29 17       	cp	r18, r25
 2ee:	e1 f3       	breq	.-8      	; 0x2e8 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 2f0:	e2 2f       	mov	r30, r18
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	eb 5b       	subi	r30, 0xBB	; 187
 2f6:	fe 4f       	sbci	r31, 0xFE	; 254
 2f8:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 2fa:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 2fe:	e1 ec       	ldi	r30, 0xC1	; 193
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	80 62       	ori	r24, 0x20	; 32
 306:	80 83       	st	Z, r24
 308:	08 95       	ret

0000030a <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	ec 01       	movw	r28, r24
    while (*s)
 310:	88 81       	ld	r24, Y
 312:	88 23       	and	r24, r24
 314:	31 f0       	breq	.+12     	; 0x322 <uart_puts+0x18>
 316:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 318:	0e 94 70 01 	call	0x2e0	; 0x2e0 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 31c:	89 91       	ld	r24, Y+
 31e:	81 11       	cpse	r24, r1
 320:	fb cf       	rjmp	.-10     	; 0x318 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <__itoa_ncheck>:
 328:	bb 27       	eor	r27, r27
 32a:	4a 30       	cpi	r20, 0x0A	; 10
 32c:	31 f4       	brne	.+12     	; 0x33a <__itoa_ncheck+0x12>
 32e:	99 23       	and	r25, r25
 330:	22 f4       	brpl	.+8      	; 0x33a <__itoa_ncheck+0x12>
 332:	bd e2       	ldi	r27, 0x2D	; 45
 334:	90 95       	com	r25
 336:	81 95       	neg	r24
 338:	9f 4f       	sbci	r25, 0xFF	; 255
 33a:	0c 94 a0 01 	jmp	0x340	; 0x340 <__utoa_common>

0000033e <__utoa_ncheck>:
 33e:	bb 27       	eor	r27, r27

00000340 <__utoa_common>:
 340:	fb 01       	movw	r30, r22
 342:	55 27       	eor	r21, r21
 344:	aa 27       	eor	r26, r26
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	aa 1f       	adc	r26, r26
 34c:	a4 17       	cp	r26, r20
 34e:	10 f0       	brcs	.+4      	; 0x354 <__utoa_common+0x14>
 350:	a4 1b       	sub	r26, r20
 352:	83 95       	inc	r24
 354:	50 51       	subi	r21, 0x10	; 16
 356:	b9 f7       	brne	.-18     	; 0x346 <__utoa_common+0x6>
 358:	a0 5d       	subi	r26, 0xD0	; 208
 35a:	aa 33       	cpi	r26, 0x3A	; 58
 35c:	08 f0       	brcs	.+2      	; 0x360 <__utoa_common+0x20>
 35e:	a9 5d       	subi	r26, 0xD9	; 217
 360:	a1 93       	st	Z+, r26
 362:	00 97       	sbiw	r24, 0x00	; 0
 364:	79 f7       	brne	.-34     	; 0x344 <__utoa_common+0x4>
 366:	b1 11       	cpse	r27, r1
 368:	b1 93       	st	Z+, r27
 36a:	11 92       	st	Z+, r1
 36c:	cb 01       	movw	r24, r22
 36e:	0c 94 b9 01 	jmp	0x372	; 0x372 <strrev>

00000372 <strrev>:
 372:	dc 01       	movw	r26, r24
 374:	fc 01       	movw	r30, r24
 376:	67 2f       	mov	r22, r23
 378:	71 91       	ld	r23, Z+
 37a:	77 23       	and	r23, r23
 37c:	e1 f7       	brne	.-8      	; 0x376 <strrev+0x4>
 37e:	32 97       	sbiw	r30, 0x02	; 2
 380:	04 c0       	rjmp	.+8      	; 0x38a <strrev+0x18>
 382:	7c 91       	ld	r23, X
 384:	6d 93       	st	X+, r22
 386:	70 83       	st	Z, r23
 388:	62 91       	ld	r22, -Z
 38a:	ae 17       	cp	r26, r30
 38c:	bf 07       	cpc	r27, r31
 38e:	c8 f3       	brcs	.-14     	; 0x382 <strrev+0x10>
 390:	08 95       	ret

00000392 <_exit>:
 392:	f8 94       	cli

00000394 <__stop_program>:
 394:	ff cf       	rjmp	.-2      	; 0x394 <__stop_program>
